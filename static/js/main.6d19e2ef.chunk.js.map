{"version":3,"sources":["components/Header/Header.js","components/Filter/Filter.js","components/ListItem/ListItem.js","components/Loading/Loading.js","components/GlobalStats/GlobalStats.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Filter","props","sort","countries","action","console","log","slice","a","b","nonCriticalPercent","country","cases","recoveredPercent","type","defaultChecked","onChange","hide","hideDeaths","activeFilter","first","onClick","sorted","countriesState","sortCountriesData","setFilter","second","third","fourth","ListItem","src","itemData","countryInfo","flag","alt","title","key","i","todayDeaths","todayCases","daysWithoutDeaths","toFixed","recovered","replace","active","deaths","Loading","GlobalStats","globalData","end","separator","suffix","delay","decimals","duration","updated","Footer","href","target","rel","App","useState","setGlobalData","countriesData","setCountriesData","setHideDeaths","setActiveFilter","useEffect","covid","getCountry","countriesCalculted","getCountriesCalculations","getHistoricalValuesForCountries","arrOfCountries","historicalDataFiltered","filterLast7Days","mergedData","mergeData","getAll","all","allCalculted","getAllCalculations","fetchData","promises","map","push","fetch","then","r","json","Promise","forEach","arr","timeline","hasOwnProperty","length","countryData","historicalData","item","index","updatedItem","reverse","data","Date","toLocaleString","criticalPercent","critical","activePercent","result","value","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6d19e2ef.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => (\r\n  <div className=\"header\">\r\n    <div className=\"headerWrapper\">\r\n      <h1 className=\"header-title\">CORONA<span>+</span></h1>\r\n      {/* <div className=\"header-subtitle\">Focusing on the more positive statistics.</div> */}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Filter = props => {\r\n  const sort = (countries, action) => {\r\n    console.log(\"state\", countries)\r\n    switch(action) {\r\n      case 'sortByNonCritical':\r\n        return countries.slice().sort((a, b) => (a.nonCriticalPercent < b.nonCriticalPercent) ? 1 : -1)\r\n      case 'sortByName':\r\n        return countries.slice().sort((a, b) => (a.country > b.country) ? 1 : -1)\r\n        case 'sortByCases':\r\n        return countries.slice().sort((a, b) => (a.cases < b.cases) ? 1 : -1)\r\n      case 'sortByRecovered':\r\n        return countries.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1)\r\n      default:\r\n        return countries.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter-checkbox\">\r\n        <input type=\"checkbox\"\r\n          defaultChecked={false} \r\n          onChange={() => {\r\n            props.hide(!props.hideDeaths)\r\n          }\r\n        } />\r\n        <span>Show deaths</span>\r\n      </div>\r\n      <div className=\"filterListWrapper\">\r\n        <ul className=\"filterList resetList\">\r\n          <span className=\"filterList-label\">Sort by: </span>\r\n          <li className={`filterList-item ${props.activeFilter.first ? \"filterList-item--active\" : \"\"}`}\r\n            onClick={() => {\r\n              let sorted = sort(props.countriesState, 'sortByRecovered')\r\n              let newFilter = {\r\n                first: true,\r\n                second: false,\r\n                third: false,\r\n                fourth: false\r\n              }\r\n              props.sortCountriesData(sorted)\r\n              props.setFilter(newFilter)\r\n            }\r\n          }>Recovered</li>\r\n\r\n          <li className={`filterList-item ${props.activeFilter.second ? \"filterList-item--active\" : \"\"}`}\r\n            onClick={() => {\r\n              let sorted = sort(props.countriesState, 'sortByNonCritical')\r\n              let newFilter = {\r\n                first: false,\r\n                second: true,\r\n                third: false,\r\n                fourth: false\r\n              }\r\n              props.sortCountriesData(sorted)\r\n              props.setFilter(newFilter)\r\n            }\r\n          }>Mild cases</li>\r\n\r\n          <li className={`filterList-item ${props.activeFilter.third ? \"filterList-item--active\" : \"\"}`}\r\n            onClick={() => {\r\n              let sorted = sort(props.countriesState, 'sortByName')\r\n              let newFilter = {\r\n                first: false,\r\n                second: false,\r\n                third: true,\r\n                fourth: false\r\n              }\r\n              props.sortCountriesData(sorted)\r\n              props.setFilter(newFilter)\r\n            }\r\n          }>Country</li>\r\n\r\n          <li className={`filterList-item ${props.activeFilter.fourth ? \"filterList-item--active\" : \"\"}`}\r\n            onClick={() => {\r\n              let sorted = sort(props.countriesState, 'sortByCases')\r\n              let newFilter = {\r\n                first: false,\r\n                second: false,\r\n                third: false,\r\n                fourth: true\r\n              }\r\n              props.sortCountriesData(sorted)\r\n              props.setFilter(newFilter)\r\n            }\r\n          }>Total cases</li>\r\n        </ul>\r\n        <span className=\"filterList-subtitle\">Only showing countries with over 1000 cases</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst ListItem = (props) => (\r\n  <li className=\"listItem\">\r\n      <div className=\"listItem-titleWrapper\">\r\n        <div className=\"listItem-title\">\r\n          <span className=\"listItem-flag\">\r\n            <img src={props.itemData.countryInfo.flag}\r\n              alt={`Flag of ${props.itemData.country}`}\r\n              title={`Flag of ${props.itemData.country}`}\r\n              key={props.i}\r\n              className=\"listItem-flag\"/>\r\n          </span>\r\n          <h2 className=\"listItem-countryname\">{props.itemData.country}</h2>\r\n        </div>\r\n        <div className=\"listItem-alertWrapper\">\r\n          { props.itemData.todayDeaths === 0 && props.itemData.todayCases === 0 &&\r\n            <div className=\"listItem-noData highlighted highlightTag\">No new data since yesterday</div>\r\n          }\r\n          { props.itemData.todayDeaths === 0 && props.itemData.todayCases > 0 &&\r\n            <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths today!</div>\r\n          }\r\n          { props.itemData.daysWithoutDeaths > 1 &&\r\n            <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths the past {props.itemData.daysWithoutDeaths} days!</div>\r\n          }\r\n        </div>\r\n      </div>\r\n      <ul className=\"listItem-stats resetList\">\r\n        <li className=\"recovered listItem-statsItem\">\r\n          <span className={`title ${props.activeFilter.first === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Recovered:\r\n          </span>\r\n          <div className=\"listItem-recoveredWrapper\">\r\n            <span className={`percent ${props.activeFilter.first === true ? \"highlighted\" : \"\"}`}>\r\n              {props.itemData.recoveredPercent.toFixed(2)}%\r\n            </span>\r\n            <span>\r\n              ({props.itemData.recovered.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")})\r\n            </span>\r\n          </div>\r\n        </li>\r\n        <li className=\"nonCritical listItem-statsItem\">\r\n          <span className={`title ${props.activeFilter.second === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Mild cases:\r\n          </span>\r\n          <span className={`${props.activeFilter.second === true ? \"highlighted\" : \"\"}`}>\r\n            {props.itemData.nonCriticalPercent.toFixed(2)}%\r\n          </span>\r\n        </li>\r\n        <li className=\"active listItem-statsItem\">\r\n          <span className=\"title\">\r\n            Active cases:\r\n          </span>\r\n          {props.itemData.active.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n        </li>\r\n        <li className=\"cases listItem-statsItem\">\r\n          <span className={`title ${props.activeFilter.fourth === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Total cases:\r\n          </span>\r\n          <span className={`${props.activeFilter.fourth === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            {props.itemData.cases.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n          </span>\r\n        </li>\r\n          { !props.hideDeaths &&\r\n            <li className=\"deaths listItem-statsItem\">\r\n              <span className=\"title\">\r\n                Total deaths:\r\n              </span>\r\n              <span className=\"deaths-number\">\r\n                {props.itemData.deaths.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n              </span>\r\n            </li>\r\n          }\r\n      </ul>\r\n  </li>\r\n)\r\n\r\nexport default ListItem\r\n","import React from 'react'\r\n\r\nconst Loading = () => (\r\n  <div className=\"loading\">\r\n    Loading..\r\n  </div>\r\n)\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport CountUp from 'react-countup';\r\nimport Loading from './../Loading/Loading'\r\n\r\n\r\nconst GlobalStats = props => (\r\n  <div className=\"globalStats componentSpacing\">\r\n    <div className=\"globalStatsTextWrapper\">\r\n      <div className=\"globalStats-total\">\r\n        <strong>Total cases: </strong>\r\n        { props.globalData ? \r\n          <span>{props.globalData.cases.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span> :\r\n          <Loading />\r\n        }\r\n          {}\r\n      </div>\r\n      <div className=\"globalStats-recovered highlighted\">\r\n        <strong>Recovered: </strong>\r\n        { props.globalData ? \r\n          <span>{props.globalData.recovered.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span> :\r\n          <Loading />\r\n        }\r\n        { props.globalData && \r\n         <span className=\"highlighted globalStats-recoveredNumber\">\r\n          (<CountUp \r\n            end={props.globalData.recoveredPercent}\r\n            separator=\",\"\r\n            suffix=\"%\"\r\n            delay={0.3}\r\n            decimals={2}\r\n            duration={3.2} />)\r\n          </span>\r\n        }\r\n      </div>\r\n        { !props.hideDeaths &&\r\n          <div className=\"globalStats-deaths\">\r\n            <strong>Deaths: </strong>\r\n            <span>{props.globalData.deaths.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span>\r\n          </div>\r\n        }\r\n      <div className=\"globalStats-updated\">\r\n        <strong>Updated: </strong>\r\n        { props.globalData ? \r\n          <span>{props.globalData.updated}</span> :\r\n          <Loading />\r\n        }\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default GlobalStats\r\n","import React from 'react'\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer componentSpacing\">\r\n    Created by <a href=\"https://www.petterastedt.com/\" target=\"_blank\" alt=\"Link to portifolio website\" rel=\"noopener noreferrer\">Petter Åstedt</a>.\r\n    See the code on <a href=\"https://github.com/petterastedt/\" target=\"_blank\" alt=\"Link to Github\" rel=\"noopener noreferrer\">Github</a>.\r\n  </div>\r\n)\r\n\r\nexport default Footer\r\n","import React, { useState, useEffect } from 'react'\nimport covid from 'novelcovid'\nimport Header from './components/Header/Header'\nimport Filter from './components/Filter/Filter'\nimport ListItem from './components/ListItem/ListItem'\nimport GlobalStats from './components/GlobalStats/GlobalStats'\nimport Footer from './components/Footer/Footer'\n\nconst App = () => {\n  const [globalData, setGlobalData] = useState(null)\n  const [countriesData, setCountriesData] = useState([])\n  const [hideDeaths, setHideDeaths] = useState(true)\n  const [activeFilter, setActiveFilter] = useState({ first: true })\n\n  const historyEndpoint = 'https://corona.lmao.ninja/v2/historical/'\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let countries = await covid.getCountry({ sort: 'cases' })\n      let countriesCalculted = getCountriesCalculations(countries)\n\n      let arrOfCountries = await getHistoricalValuesForCountries(countriesCalculted)\n      let historicalDataFiltered = filterLast7Days(arrOfCountries)\n      let mergedData = mergeData(countriesCalculted, historicalDataFiltered)\n\n      setCountriesData(mergedData.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1))\n\n      let all = await covid.getAll()\n      let allCalculted = getAllCalculations(all)\n\n      setGlobalData(allCalculted)\n    }\n    fetchData()\n  }, [])\n\n  const sortCountriesData = sorted => setCountriesData(sorted)\n  const hide = value => setHideDeaths(value)\n  const setFilter = filter => setActiveFilter(filter)\n\n  const getHistoricalValuesForCountries = async (countries) => {\n    const promises = []\n    countries.map(country => promises.push(fetch(`${historyEndpoint}${country.country}`).then(r => r.json())))\n    return await Promise.all(promises)\n  }\n\n  const filterLast7Days = countries => {\n    const arrOfCountries = []\n    countries.forEach(country => {\n      const arr = []\n      for (let key in country.timeline.deaths) {\n        if (country.timeline.deaths.hasOwnProperty(key)) {\n          arr.push(country.timeline.deaths[key])\n        }\n      }\n      arrOfCountries.push(arr.slice(arr.length - 7))\n    })\n    return arrOfCountries\n  }\n\n  const mergeData = (countryData, historicalData) => {\n    let arr = []\n\n    countryData.forEach((country, i) => {\n      let daysWithoutDeaths = 0\n      historicalData[i].forEach((item, index) => {\n        if (item === historicalData[i][0] && index !== 0 && historicalData[i][index+1] !== item) {\n          daysWithoutDeaths = index+1\n        }\n      })\n      let updatedItem = { ...country, historicalData: historicalData[i].reverse(), daysWithoutDeaths }\n      arr.push(updatedItem)\n    })\n    return arr\n  }\n\n  const getAllCalculations = data => {\n    let updated = new Date(data.updated).toLocaleString('sv-SE')\n    let recoveredPercent = data.recovered / (data.cases - data.deaths) * 100\n    let calculated = { ...data, recoveredPercent, updated }\n    return calculated\n  }\n\n  const getCountriesCalculations = data => {\n    let updated = []\n\n    data.forEach(item => {\n      const threshold = 999 // Only show countries with more than X cases\n      if (item.cases > threshold) {\n        let recoveredPercent = item.recovered / (item.cases - item.deaths) * 100\n        let criticalPercent = item.critical / (item.cases - item.deaths) * 100\n        let nonCriticalPercent = 100 - criticalPercent\n        let activePercent = item.active / (item.cases - item.deaths) * 100\n\n        let result = { ...item, recoveredPercent, criticalPercent, nonCriticalPercent, activePercent }\n        updated.push(result)\n      }\n    })\n    return updated\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n\n      <GlobalStats\n        hideDeaths={hideDeaths}\n        globalData={globalData} />\n\n      {countriesData &&\n        <Filter\n          countriesState={countriesData}\n          hide={hide}\n          hideDeaths={hideDeaths}\n          setFilter={setFilter}\n          sortCountriesData={sortCountriesData} \n          activeFilter={activeFilter}/>\n      }\n\n      {countriesData &&\n        <ul className=\"list resetList componentSpacing\"> {\n          countriesData.map((item, i) => <ListItem itemData={item} activeFilter={activeFilter} hideDeaths={hideDeaths} key={i} />)\n        } </ul>\n      }\n\n      <div className=\"listNotice\">\n        <a href=\"https://github.com/NovelCOVID/API\" target=\"_blank\" alt=\"Link to Github\" rel=\"noopener noreferrer\">Data sources</a>\n      </div>\n\n       <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}