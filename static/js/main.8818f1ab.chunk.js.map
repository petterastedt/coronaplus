{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","components/Filter/Filter.js","components/ListItem/ListItem.js","components/Loading/Loading.js","components/GlobalStats/GlobalStats.js","components/StatsSummary/StatsSummary.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Search","props","aria-label","placeholder","onChange","e","preventDefault","searchFilter","target","value","handleOnChange","autoComplete","Filter","countriesState","hide","hideDeaths","setFilter","sortCountriesData","activeFilter","threshold","setSearchFilter","sort","countries","action","slice","a","b","nonCriticalPercent","country","cases","recoveredPercent","type","defaultChecked","first","onClick","sorted","second","third","fourth","filter","ListItem","itemData","src","countryInfo","flag","alt","title","loading","todayDeaths","todayCases","daysWithoutDeaths","toFixed","recoveredYesterday","recovered","replace","active","deaths","Loading","GlobalStats","globalData","error","end","separator","suffix","delay","decimals","duration","recoveredPercentYesterday","updated","StatsSummary","totallyRecovered","length","map","item","index","key","role","mostRecovered","noDeaths","criticalLessThanFive","recoveredMostDifference","recoveredDifference","Footer","href","rel","App","useState","setGlobalData","countriesData","setCountriesData","filterInput","setFilterInput","setHideDeaths","setError","setActiveFilter","covid","NovelCovid","useEffect","countriesCalculted","getCountriesCalculations","getHistorical","countriesHistorical","countriesHistoricalFiltered","filterLastWeek","mergedData","mergeData","all","global","historical","globalYesterday","globalCalculted","getAllCalculations","console","log","getPercent","value1","value2","value3","arr","forEach","obj","push","province","countriesGetData","reduce","acc","current","find","concat","promises","Promise","resolvedPromises","countriesArray","timeline","hasOwnProperty","countryData","historicalData","historicalAll","i","reverse","c","toUpperCase","Object","values","Math","abs","data","dataYesterday","Date","toLocaleString","casesYesterday","deathsYesterday","criticalPercent","critical","activePercent","formattedFilter","charAt","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8818f1ab.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => (\r\n  <div className=\"header\">\r\n    <div className=\"headerWrapper\">\r\n      <h1 className=\"header-title\">CORONA<span>+</span></h1>\r\n      {/* <div className=\"header-subtitle\">POSITIVE STATISTICS</div> */}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Search = props => {\r\n  const handleOnChange = (e) => {\r\n\t\te.preventDefault()\r\n\t\tprops.searchFilter(e.target.value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        aria-label=\"Search country\"\r\n        className=\"search-field\"\r\n        placeholder=\"Search country..\"\r\n        onChange={(e) => handleOnChange(e)}\r\n        autoComplete=\"off\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport Search from './../Search/Search'\r\n\r\nconst Filter = ({countriesState, hide ,hideDeaths, setFilter, sortCountriesData, activeFilter, threshold, setSearchFilter}) => {\r\n  const sort = (countries, action) => {\r\n    switch(action) {\r\n      case 'sortByNonCritical':\r\n        return countries.slice().sort((a, b) => (a.nonCriticalPercent < b.nonCriticalPercent) ? 1 : -1)\r\n      case 'sortByName':\r\n        return countries.slice().sort((a, b) => (a.country > b.country) ? 1 : -1)\r\n        case 'sortByCases':\r\n        return countries.slice().sort((a, b) => (a.cases < b.cases) ? 1 : -1)\r\n      case 'sortByRecovered':\r\n        return countries.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1)\r\n      default:\r\n        return countries.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter-checkbox\">\r\n        <input type=\"checkbox\"\r\n          aria-label=\"Toggle death statistics\"\r\n          defaultChecked={false} \r\n          onChange={() => {\r\n            hide(!hideDeaths)\r\n          }\r\n        } />\r\n        <span>Show deaths</span>\r\n      </div>\r\n      <div className=\"filterListWrapper\">\r\n        <div className=\"filterListSearchWrapper\">\r\n          <div className=\"filterCategoriesWrapper\">\r\n            <span className=\"filterList-label\">Sort by: </span>\r\n            <ul className=\"filterList resetList\">\r\n              <li className={`filterList-item ${activeFilter.first ? \"filterList-item--active\" : \"\"}`}\r\n                onClick={() => {\r\n                  let sorted = sort(countriesState, 'sortByRecovered')\r\n                  let newFilter = {\r\n                    first: true,\r\n                    second: false,\r\n                    third: false,\r\n                    fourth: false\r\n                  }\r\n                  sortCountriesData(sorted)\r\n                  setFilter(newFilter)\r\n                }\r\n              }>Recovered</li>\r\n\r\n              <li className={`filterList-item ${activeFilter.second ? \"filterList-item--active\" : \"\"}`}\r\n                onClick={() => {\r\n                  let sorted = sort(countriesState, 'sortByNonCritical')\r\n                  let newFilter = {\r\n                    first: false,\r\n                    second: true,\r\n                    third: false,\r\n                    fourth: false\r\n                  }\r\n                  sortCountriesData(sorted)\r\n                  setFilter(newFilter)\r\n                }\r\n              }>Mild cases</li>\r\n\r\n              <li className={`filterList-item ${activeFilter.third ? \"filterList-item--active\" : \"\"}`}\r\n                onClick={() => {\r\n                  let sorted = sort(countriesState, 'sortByName')\r\n                  let newFilter = {\r\n                    first: false,\r\n                    second: false,\r\n                    third: true,\r\n                    fourth: false\r\n                  }\r\n                  sortCountriesData(sorted)\r\n                  setFilter(newFilter)\r\n                }\r\n              }>Country</li>\r\n\r\n              <li className={`filterList-item ${activeFilter.fourth ? \"filterList-item--active\" : \"\"}`}\r\n                onClick={() => {\r\n                  let sorted = sort(countriesState, 'sortByCases')\r\n                  let newFilter = {\r\n                    first: false,\r\n                    second: false,\r\n                    third: false,\r\n                    fourth: true\r\n                  }\r\n                  sortCountriesData(sorted)\r\n                  setFilter(newFilter)\r\n                }\r\n              }>Total cases</li>\r\n            </ul>\r\n          </div>\r\n          <Search\r\n            searchFilter={(filter) => setSearchFilter(filter)} />\r\n        </div>\r\n        <span className=\"filterList-subtitle\">Only showing countries with over {threshold} cases</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst ListItem = ({itemData, activeFilter, hideDeaths}) => (\r\n  <li className=\"listItem\">\r\n      <div className=\"listItem-titleWrapper\">\r\n        <div className=\"listItem-title\">\r\n          <span className=\"listItem-flag\">\r\n            <img src={itemData.countryInfo.flag}\r\n              alt={`Flag of ${itemData.country}`}\r\n              title={`Flag of ${itemData.country}`}\r\n              className=\"listItem-flag\"\r\n              loading=\"lazy\" />\r\n          </span>\r\n          <h2 className=\"listItem-countryname\">{itemData.country}</h2>\r\n        </div>\r\n        <div className=\"listItem-alertWrapper\">\r\n          { itemData.todayDeaths === 0 && itemData.todayCases === 0 &&\r\n            <div className=\"listItem-noData highlighted highlightTag\">No new data since yesterday</div>\r\n          }\r\n          { itemData.todayDeaths === 0 && itemData.todayCases > 0 &&\r\n            <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths today!</div>\r\n          }\r\n          { itemData.daysWithoutDeaths > 1 && itemData.daysWithoutDeaths < 7 && itemData.todayDeaths === 0 ? <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths the past {itemData.daysWithoutDeaths} days!</div>\r\n            : itemData.daysWithoutDeaths > 6 && itemData.todayDeaths === 0 ? <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths in 7+ days!</div>\r\n            : \"\"\r\n          }\r\n        </div>\r\n      </div>\r\n      <ul className=\"listItem-stats resetList\">\r\n        <li className=\"recovered listItem-statsItem\">\r\n          <span className={`title ${activeFilter.first === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Recovered:\r\n          </span>\r\n          <div className=\"listItem-recoveredWrapper\">\r\n            <span className={`percent ${activeFilter.first === true ? \"highlighted\" : \"\"}`}>\r\n              {itemData.recoveredPercent.toFixed(2)}%\r\n            </span>\r\n            { itemData.recoveredPercent > itemData.recoveredYesterday ? <div className=\"highlighted plus\" title=\"Percent of recovered increased since yesterday\">&#8593;</div>\r\n              : itemData.recoveredPercent === itemData.recoveredYesterday ? <div className=\"highlighted equal\" title=\"No change since yesterday\">-</div>\r\n              : <div className=\"highlighted minus\" title=\"Percent of recovered decreased since yesterday\">&#8595;</div>\r\n            }\r\n            <span>\r\n              ({itemData.recovered.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")})\r\n            </span>\r\n          </div>\r\n        </li>\r\n        <li className=\"nonCritical listItem-statsItem\">\r\n          <span className={`title ${activeFilter.second === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Mild cases:\r\n          </span>\r\n          <span className={`${activeFilter.second === true ? \"highlighted\" : \"\"}`}>\r\n            {itemData.nonCriticalPercent.toFixed(2)}%\r\n          </span>\r\n        </li>\r\n        <li className=\"active listItem-statsItem\">\r\n          <span className=\"title\">\r\n            Active cases:\r\n          </span>\r\n          {itemData.active.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n        </li>\r\n        <li className=\"cases listItem-statsItem\">\r\n          <span className={`title ${activeFilter.fourth === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Total cases:\r\n          </span>\r\n          <span className={`${activeFilter.fourth === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            {itemData.cases.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n          </span>\r\n        </li>\r\n          { !hideDeaths &&\r\n            <li className=\"deaths listItem-statsItem\">\r\n              <span className=\"title\">\r\n                Total deaths:\r\n              </span>\r\n              <span className=\"deaths-number\">\r\n                {itemData.deaths.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n              </span>\r\n            </li>\r\n          }\r\n      </ul>\r\n  </li>\r\n)\r\n\r\nexport default ListItem\r\n","import React from 'react'\r\n\r\nconst Loading = () => (\r\n  <div className=\"loading\">\r\n    Loading..\r\n  </div>\r\n)\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport CountUp from 'react-countup';\r\nimport Loading from '../Loading/Loading'\r\n\r\nconst GlobalStats = ({hideDeaths, globalData, error}) => (\r\n  <div className=\"globalStats componentSpacing\">\r\n    { error ? <div className=\"error\">{error}</div>\r\n    :\r\n      <div className=\"globalStatsTextWrapper\">\r\n        <div className=\"globalStats-total\">\r\n          <strong>Total cases: </strong>\r\n          { globalData ?\r\n            <span>{globalData.cases.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span> :\r\n            <Loading />\r\n          }\r\n            {}\r\n        </div>\r\n        <div className=\"globalStats-recovered highlighted\">\r\n          <strong>Recovered: </strong>\r\n          { globalData ?\r\n            <span>{globalData.recovered.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span> :\r\n            <Loading />\r\n          }\r\n          { globalData &&\r\n            <span className=\"highlighted globalStats-recoveredNumber\">\r\n              (<CountUp\r\n                end={globalData.recoveredPercent}\r\n                separator=\",\"\r\n                suffix=\"%\"\r\n                delay={0.3}\r\n                decimals={2}\r\n                duration={3.2} />)\r\n            </span>\r\n          }\r\n          { globalData &&\r\n            <div className=\"globalStats-indicator\">\r\n              { globalData.recoveredPercent > globalData.recoveredPercentYesterday ? <div className=\"highlighted plus\" title=\"Percent recovered increased since yesterday\">&#8593;</div>\r\n                : globalData.recoveredPercent === globalData.recoveredYesterday ? <div className=\"highlighted equal\" title=\"No change since yesterday\">-</div>\r\n                : <div className=\"highlighted minus\" title=\"Percent recovered decreased since yesterday\">&#8595;</div>\r\n              }\r\n            </div>\r\n          }\r\n        </div>\r\n          { !hideDeaths &&\r\n            <div className=\"globalStats-deaths\">\r\n              <strong>Deaths: </strong>\r\n              <span>{globalData.deaths.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span>\r\n            </div>\r\n          }\r\n        <div className=\"globalStats-updated\">\r\n          <strong>Updated: </strong>\r\n          { globalData ?\r\n            <span>{globalData.updated}</span> :\r\n            <Loading />\r\n          }\r\n        </div>\r\n        { !globalData &&\r\n          <div className=\"globalStats-warning\">Loading times might be longer than usual due to high preassure on the API, hang on.</div>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n)\r\n\r\nexport default GlobalStats\r\n","import React from 'react'\r\n\r\nconst StatsSummary = ({globalData, threshold}) => (\r\n    <div className=\"statsSummary componentSpacing\">\r\n      <div className=\"statsSummary-title\">\r\n        Summary\r\n      </div>\r\n      <ul className=\"statsSummary-list\">\r\n        { globalData.totallyRecovered.length !== 0 &&\r\n          <li className=\"statsSummary-item\">\r\n            { globalData.totallyRecovered\r\n              .map((item, index) => <span className=\"highlighted\" key={index}>{item.country}{index === 0 && globalData.totallyRecovered.length === 2 && \" and \"}{index < globalData.totallyRecovered.length-2 && \", \"}{index === globalData.totallyRecovered.length-2 && \" and \"}</span>)\r\n            }\r\n            have reported <strong>full recovery</strong> from the Corona virus! <span role=\"img\" aria-label=\"elebration emoji\">🎉</span>\r\n          </li>\r\n        }\r\n\r\n        {/* { Math.abs(globalData.recoveredPercent - globalData.recoveredPercentYesterday) > 0.5 &&\r\n          <li className=\"statsSummary-item\">\r\n            Worldwide recovery is up <span className=\"highlighted\">+{Math.abs(globalData.recoveredPercent - globalData.recoveredPercentYesterday).toFixed(2)}%</span> since yesterday!\r\n          </li>\r\n        } */}\r\n\r\n        <li className=\"statsSummary-item\">\r\n          <strong className=\"country highlighted\">\r\n            {globalData.mostRecovered[0].country}\r\n          </strong>\r\n            has the highest amount of recovered patients <span className=\"highlighted\">({globalData.mostRecovered[0].recoveredPercent.toFixed()}%)</span>\r\n            , followed by <strong className=\"country highlighted\">{globalData.mostRecovered[1].country}</strong>\r\n          <span className=\"highlighted\">\r\n            ({globalData.mostRecovered[1].recoveredPercent.toFixed()}%)\r\n          </span> and <strong className=\"country highlighted\"> {globalData.mostRecovered[2].country}</strong>\r\n          <span className=\"highlighted\">\r\n            ({globalData.mostRecovered[2].recoveredPercent.toFixed()}%)\r\n          </span>\r\n        </li>\r\n\r\n          { globalData.noDeaths.length > 0 &&\r\n            <li className=\"statsSummary-item\">\r\n              {globalData.noDeaths\r\n                .map((item, index) => <span className=\"highlighted\" key={index}>{item.country}{index === 0 && globalData.noDeaths.length === 2 && \" and \"}{index === 0 && globalData.noDeaths.length > 2 && \", \"} {index === 1 && globalData.noDeaths.length > 2 && \" and \"}</span>)\r\n                .slice(0, 3)}\r\n              {globalData.noDeaths.length > 3 && \"are some of the countries that\"} have had <strong>multiple days</strong> without any reported deaths.\r\n            </li>\r\n          }\r\n\r\n        <li className=\"statsSummary-item\">\r\n          In <span className=\"highlighted\">\r\n            {globalData.criticalLessThanFive.toFixed()}%\r\n          </span>\r\n            of the countries with active cases, <span className=\"highlighted\">less than 5% of them are critical.</span>*\r\n        </li>\r\n\r\n        { globalData.recoveredMostDifference.country &&\r\n          <li className=\"statsSummary-item\">\r\n            <strong className=\"country highlighted\">\r\n              {globalData.recoveredMostDifference.country}\r\n            </strong>\r\n            has the highest increase in recoveries from the past day with <span className=\"highlighted\">+{globalData.recoveredMostDifference.recoveredDifference.toFixed()}%</span>*\r\n          </li>\r\n        }\r\n\r\n      </ul>\r\n      <div className=\"listNotice\">\r\n        *Based on countries with at least {threshold} reported cases\r\n      </div>\r\n    </div>\r\n  )\r\n\r\nexport default StatsSummary\r\n","import React from 'react'\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer componentSpacing\">\r\n    Created by <a href=\"https://www.petterastedt.com/\" target=\"_blank\" alt=\"Link to portifolio website\" rel=\"noopener noreferrer\">Petter Åstedt</a>.\r\n    See the code on <a href=\"https://github.com/petterastedt/\" target=\"_blank\" alt=\"Link to Github\" rel=\"noopener noreferrer\">Github</a>.\r\n  </div>\r\n)\r\n\r\nexport default Footer\r\n","import React, { useState, useEffect } from 'react'\nimport { NovelCovid } from 'novelcovid'\nimport Header from './components/Header/Header'\nimport Filter from './components/Filter/Filter'\nimport ListItem from './components/ListItem/ListItem'\nimport GlobalStats from './components/GlobalStats/GlobalStats'\nimport StatsSummary from './components/StatsSummary/StatsSummary'\nimport Footer from './components/Footer/Footer'\n\nconst App = () => {\n  const [globalData, setGlobalData] = useState(null)\n  const [countriesData, setCountriesData] = useState([])\n  const [filterInput, setFilterInput] = useState('')\n  const [hideDeaths, setHideDeaths] = useState(true)\n  const [error, setError] = useState(null)\n  const [activeFilter, setActiveFilter] = useState({ first: true })\n\n  const covid = new NovelCovid()\n  const threshold = 1000 // Only show countries with more than X cases\n\n  useEffect(() => {\n    (async () => {\n      try {\n        // Current country data\n        const countries = await covid.countries()\n        const countriesCalculted = getCountriesCalculations(countries)\n\n        // Historical country data\n        const countriesHistorical = await getHistorical(countriesCalculted)\n        const countriesHistoricalFiltered = filterLastWeek(countriesHistorical)\n        const mergedData = mergeData(countriesCalculted, countriesHistoricalFiltered, countriesHistorical)\n\n        // Global data\n        const global = await covid.all()\n        const globalYesterday = await covid.historical(true)\n        const globalCalculted = getAllCalculations(global, mergedData, globalYesterday)\n\n        // Set state\n        setCountriesData(mergedData.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1))\n        setGlobalData(globalCalculted)\n      } catch(e) {\n        setError(\"Something went wrong when contacting the API, please try again later.\")\n        console.log(e)\n      }\n    })()\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  const getPercent = (value1, value2, value3) => value1 / (value2 - value3) * 100\n\n  const setSearchFilter = filter => {\n    const formattedFilter = filter.charAt(0).toUpperCase() + filter.slice(1)\n    setFilterInput(formattedFilter)\n  }\n\n  const getHistorical = async countries => {\n    const all = await covid.historical()\n    let arr = []\n    countries.forEach(item => all.forEach(obj => item.country === obj.country && arr.push(obj)))\n\n    const countriesData = arr.filter(item => !item.province)\n    const countriesGetData = arr.filter(item => item.province).reduce((acc, current) => {\n      const x = acc.find(item => item.country === current.country)\n      if (!x) {\n        return acc.concat([current])\n      } else {\n        return acc\n      }\n    }, [])\n\n    const promises = await countriesGetData.map(async country => await covid.historical(null, country.country))\n    const resolvedPromises = await Promise.all(promises)\n\n    return resolvedPromises.concat(countriesData)\n  }\n\n  const filterLastWeek = countries => {\n    const countriesArray = []\n    const amountOfDays = 7 // Number of days back in time to return\n    countries.forEach(country => {\n      const arr = []\n      for (let key in country.timeline.deaths) {\n        if (country.timeline.deaths.hasOwnProperty(key)) {\n          arr.push(country.timeline.deaths[key])\n        }\n      }\n      countriesArray.push(arr.slice(arr.length - amountOfDays))\n    })\n    return countriesArray\n  }\n\n  const mergeData = (countryData, historicalData, historicalAll) => {\n    const arr = []\n    countryData.forEach((country, i) => {\n      let daysWithoutDeaths = 0\n      let recoveredYesterday\n      let recoveredDifference\n\n      historicalData[i].reverse().forEach((item, index) => {\n        if (item === historicalData[i][0] && index !== 0 && item !== historicalData[i][index+1]) {\n          daysWithoutDeaths = index+1\n        }\n      })\n\n      historicalAll.forEach(c => {\n        if (country.country.toUpperCase() === c.country.toUpperCase()) {\n          const deaths = Object.values(c.timeline.deaths)[Object.values(c.timeline.deaths).length-1]\n          const cases = Object.values(c.timeline.cases)[Object.values(c.timeline.cases).length-1]\n          const recovered = Object.values(c.timeline.recovered)[Object.values(c.timeline.recovered).length-1]\n\n          recoveredYesterday = getPercent(recovered, cases, deaths)\n          recoveredDifference = Math.abs(country.recoveredPercent - recoveredYesterday)\n        }\n      })\n\n      arr.push({ ...country, historicalData: historicalData[i], daysWithoutDeaths, recoveredYesterday, recoveredDifference })\n    })\n    return arr\n  }\n\n  const getAllCalculations = (data, countriesData, dataYesterday) => {\n    const updated = new Date(data.updated).toLocaleString('sv-SE')\n    const recoveredPercent = getPercent(data.recovered, data.cases, data.deaths)\n    const mostRecovered = countriesData.sort((a,b) => b.recoveredPercent - a.recoveredPercent).slice(0, 3)\n    const noDeaths = countriesData.filter(item => item.daysWithoutDeaths > 0 && item.todayDeaths === 0)\n    const criticalLessThanFive = countriesData.filter(item => item.nonCriticalPercent > 95).length / countriesData.length * 100\n    const recoveredMostDifference = countriesData.filter(item => item.recoveredYesterday > 0 && item.recoveredYesterday !== item.recoveredPercent).sort((a,b) => b.recoveredDifference - a.recoveredDifference)[0]\n    const totallyRecovered = countriesData.filter(item => item.recoveredPercent === 100)\n\n    const recoveredYesterday = Object.values(dataYesterday.recovered)[Object.values(dataYesterday.recovered).length-1]\n    const casesYesterday = Object.values(dataYesterday.cases)[Object.values(dataYesterday.cases).length-1]\n    const deathsYesterday = Object.values(dataYesterday.deaths)[Object.values(dataYesterday.deaths).length-1]\n    const recoveredPercentYesterday = getPercent(recoveredYesterday, casesYesterday, deathsYesterday)\n\n    return { ...data, recoveredPercent, updated, mostRecovered, noDeaths, criticalLessThanFive, recoveredMostDifference, totallyRecovered, recoveredPercentYesterday }\n  }\n\n  const getCountriesCalculations = data => {\n    const updated = []\n    data.forEach(item => {\n      if (item.cases > threshold) {\n        const recoveredPercent = getPercent(item.recovered, item.cases, item.deaths)\n        const criticalPercent =  getPercent(item.critical, item.cases, item.deaths)\n        const nonCriticalPercent = 100 - criticalPercent\n        const activePercent =  getPercent(item.active, item.cases, item.deaths)\n\n        updated.push({ ...item, recoveredPercent, criticalPercent, nonCriticalPercent, activePercent })\n      }\n    })\n    return updated\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n\n      <GlobalStats\n        hideDeaths={hideDeaths}\n        globalData={globalData}\n        error={error} />\n\n      {globalData &&\n        <StatsSummary\n          globalData={globalData}\n          threshold={threshold} />\n      }\n\n      {countriesData &&\n        <Filter\n          countriesState={countriesData}\n          hide={setHideDeaths}\n          hideDeaths={hideDeaths}\n          setFilter={setActiveFilter}\n          sortCountriesData={setCountriesData}\n          activeFilter={activeFilter}\n          threshold={threshold}\n          setSearchFilter={setSearchFilter} />\n      }\n\n      {countriesData &&\n        <ul className=\"list resetList componentSpacing\"> {\n          countriesData\n            .filter(c => c.country.includes(filterInput))\n            .map((item, i) => <ListItem itemData={item} activeFilter={activeFilter} hideDeaths={hideDeaths} key={i} />)\n        } </ul>\n      }\n\n      <div className=\"listNotice\">\n        <a href=\"https://github.com/NovelCOVID/API\" target=\"_blank\" alt=\"Link to Github\" rel=\"noopener noreferrer\">Data sources</a>\n      </div>\n\n       <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}