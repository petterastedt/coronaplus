{"version":3,"sources":["components/Header/Header.js","components/Filter/Filter.js","components/ListItem/ListItem.js","components/Loading/Loading.js","components/GlobalStats/GlobalStats.js","components/StatsSummary/StatsSummary.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Filter","props","sort","countries","action","slice","a","b","nonCriticalPercent","country","cases","recoveredPercent","type","defaultChecked","onChange","hide","hideDeaths","activeFilter","first","onClick","sorted","countriesState","sortCountriesData","setFilter","second","third","fourth","ListItem","src","itemData","countryInfo","flag","alt","title","key","i","todayDeaths","todayCases","daysWithoutDeaths","toFixed","recoveredYesterday","recovered","replace","active","deaths","Loading","GlobalStats","globalData","end","separator","suffix","delay","decimals","duration","updated","StatsSummary","mostRecovered","noDeaths","map","item","index","length","criticalLessThanFive","recoveredMostDifference","recoveredDifference","Footer","href","target","rel","App","useState","setGlobalData","countriesData","setCountriesData","setHideDeaths","setActiveFilter","useEffect","covid","getCountry","countriesCalculted","getCountriesCalculations","getHistoricalValuesForCountries","arrOfCountries","historicalDataFiltered","filterLast7Days","mergedData","mergeData","getAll","all","allCalculted","getAllCalculations","fetchData","promises","push","fetch","then","r","json","Promise","forEach","arr","timeline","hasOwnProperty","countryData","historicalData","historicalAll","reverse","c","toUpperCase","Object","values","Math","abs","updatedItem","data","Date","toLocaleString","filter","criticalPercent","critical","activePercent","result","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfa8c200.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => (\r\n  <div className=\"header\">\r\n    <div className=\"headerWrapper\">\r\n      <h1 className=\"header-title\">CORONA<span>+</span></h1>\r\n      {/* <div className=\"header-subtitle\">Focusing on the more positive statistics.</div> */}\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst Filter = props => {\r\n  const sort = (countries, action) => {\r\n    switch(action) {\r\n      case 'sortByNonCritical':\r\n        return countries.slice().sort((a, b) => (a.nonCriticalPercent < b.nonCriticalPercent) ? 1 : -1)\r\n      case 'sortByName':\r\n        return countries.slice().sort((a, b) => (a.country > b.country) ? 1 : -1)\r\n        case 'sortByCases':\r\n        return countries.slice().sort((a, b) => (a.cases < b.cases) ? 1 : -1)\r\n      case 'sortByRecovered':\r\n        return countries.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1)\r\n      default:\r\n        return countries.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"filter\">\r\n      <div className=\"filter-checkbox\">\r\n        <input type=\"checkbox\"\r\n          defaultChecked={false} \r\n          onChange={() => {\r\n            props.hide(!props.hideDeaths)\r\n          }\r\n        } />\r\n        <span>Show deaths</span>\r\n      </div>\r\n      <div className=\"filterListWrapper\">\r\n        <div className=\"filterCategoriesWrapper\">\r\n          <span className=\"filterList-label\">Sort by: </span>\r\n          <ul className=\"filterList resetList\">\r\n            <li className={`filterList-item ${props.activeFilter.first ? \"filterList-item--active\" : \"\"}`}\r\n              onClick={() => {\r\n                let sorted = sort(props.countriesState, 'sortByRecovered')\r\n                let newFilter = {\r\n                  first: true,\r\n                  second: false,\r\n                  third: false,\r\n                  fourth: false\r\n                }\r\n                props.sortCountriesData(sorted)\r\n                props.setFilter(newFilter)\r\n              }\r\n            }>Recovered</li>\r\n\r\n            <li className={`filterList-item ${props.activeFilter.second ? \"filterList-item--active\" : \"\"}`}\r\n              onClick={() => {\r\n                let sorted = sort(props.countriesState, 'sortByNonCritical')\r\n                let newFilter = {\r\n                  first: false,\r\n                  second: true,\r\n                  third: false,\r\n                  fourth: false\r\n                }\r\n                props.sortCountriesData(sorted)\r\n                props.setFilter(newFilter)\r\n              }\r\n            }>Mild cases</li>\r\n\r\n            <li className={`filterList-item ${props.activeFilter.third ? \"filterList-item--active\" : \"\"}`}\r\n              onClick={() => {\r\n                let sorted = sort(props.countriesState, 'sortByName')\r\n                let newFilter = {\r\n                  first: false,\r\n                  second: false,\r\n                  third: true,\r\n                  fourth: false\r\n                }\r\n                props.sortCountriesData(sorted)\r\n                props.setFilter(newFilter)\r\n              }\r\n            }>Country</li>\r\n\r\n            <li className={`filterList-item ${props.activeFilter.fourth ? \"filterList-item--active\" : \"\"}`}\r\n              onClick={() => {\r\n                let sorted = sort(props.countriesState, 'sortByCases')\r\n                let newFilter = {\r\n                  first: false,\r\n                  second: false,\r\n                  third: false,\r\n                  fourth: true\r\n                }\r\n                props.sortCountriesData(sorted)\r\n                props.setFilter(newFilter)\r\n              }\r\n            }>Total cases</li>\r\n          </ul>\r\n        </div>\r\n        <span className=\"filterList-subtitle\">Only showing countries with over 1000 cases</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst ListItem = (props) => (\r\n  <li className=\"listItem\">\r\n      <div className=\"listItem-titleWrapper\">\r\n        <div className=\"listItem-title\">\r\n          <span className=\"listItem-flag\">\r\n            <img src={props.itemData.countryInfo.flag}\r\n              alt={`Flag of ${props.itemData.country}`}\r\n              title={`Flag of ${props.itemData.country}`}\r\n              key={props.i}\r\n              className=\"listItem-flag\"/>\r\n          </span>\r\n          <h2 className=\"listItem-countryname\">{props.itemData.country}</h2>\r\n        </div>\r\n        <div className=\"listItem-alertWrapper\">\r\n          { props.itemData.todayDeaths === 0 && props.itemData.todayCases === 0 &&\r\n            <div className=\"listItem-noData highlighted highlightTag\">No new data since yesterday</div>\r\n          }\r\n          { props.itemData.todayDeaths === 0 && props.itemData.todayCases > 0 &&\r\n            <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths today!</div>\r\n          }\r\n          { props.itemData.daysWithoutDeaths > 1 && props.itemData.todayDeaths === 0 &&\r\n            <div className=\"listItem-noDeaths highlighted highlightTag\">No reported deaths the past {props.itemData.daysWithoutDeaths} days!</div>\r\n          }\r\n        </div>\r\n      </div>\r\n      <ul className=\"listItem-stats resetList\">\r\n        <li className=\"recovered listItem-statsItem\">\r\n          <span className={`title ${props.activeFilter.first === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Recovered:\r\n          </span>\r\n          <div className=\"listItem-recoveredWrapper\">\r\n            <span className={`percent ${props.activeFilter.first === true ? \"highlighted\" : \"\"}`}>\r\n              {props.itemData.recoveredPercent.toFixed(2)}%\r\n            </span>\r\n            { props.itemData.recoveredPercent > props.itemData.recoveredYesterday ? <div className=\"highlighted plus\" title=\"Percent of recovered increased since yesterday\">&#8593;</div>\r\n              : props.itemData.recoveredPercent === props.itemData.recoveredYesterday ? <div className=\"highlighted equal\" title=\"No change since yesterday\">-</div>\r\n              : <div className=\"highlighted minus\" title=\"Percent of recovered decreased since yesterday\">&#8595;</div>\r\n            }\r\n\r\n            <span>\r\n              ({props.itemData.recovered.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")})\r\n            </span>\r\n          </div>\r\n        </li>\r\n        <li className=\"nonCritical listItem-statsItem\">\r\n          <span className={`title ${props.activeFilter.second === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Mild cases:\r\n          </span>\r\n          <span className={`${props.activeFilter.second === true ? \"highlighted\" : \"\"}`}>\r\n            {props.itemData.nonCriticalPercent.toFixed(2)}%\r\n          </span>\r\n        </li>\r\n        <li className=\"active listItem-statsItem\">\r\n          <span className=\"title\">\r\n            Active cases:\r\n          </span>\r\n          {props.itemData.active.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n        </li>\r\n        <li className=\"cases listItem-statsItem\">\r\n          <span className={`title ${props.activeFilter.fourth === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            Total cases:\r\n          </span>\r\n          <span className={`${props.activeFilter.fourth === true ? \"listItem--filterIsActive\" : \"\"}`}>\r\n            {props.itemData.cases.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n          </span>\r\n        </li>\r\n          { !props.hideDeaths &&\r\n            <li className=\"deaths listItem-statsItem\">\r\n              <span className=\"title\">\r\n                Total deaths:\r\n              </span>\r\n              <span className=\"deaths-number\">\r\n                {props.itemData.deaths.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\r\n              </span>\r\n            </li>\r\n          }\r\n      </ul>\r\n  </li>\r\n)\r\n\r\nexport default ListItem\r\n","import React from 'react'\r\n\r\nconst Loading = () => (\r\n  <div className=\"loading\">\r\n    Loading..\r\n  </div>\r\n)\r\n\r\nexport default Loading\r\n","import React from 'react'\r\nimport CountUp from 'react-countup';\r\nimport Loading from '../Loading/Loading'\r\n\r\nconst GlobalStats = props => (\r\n  <div className=\"globalStats componentSpacing\">\r\n    <div className=\"globalStatsTextWrapper\">\r\n      <div className=\"globalStats-total\">\r\n        <strong>Total cases: </strong>\r\n        { props.globalData ?\r\n          <span>{props.globalData.cases.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span> :\r\n          <Loading />\r\n        }\r\n          {}\r\n      </div>\r\n      <div className=\"globalStats-recovered highlighted\">\r\n        <strong>Recovered: </strong>\r\n        { props.globalData ?\r\n          <span>{props.globalData.recovered.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span> :\r\n          <Loading />\r\n        }\r\n        { props.globalData &&\r\n         <span className=\"highlighted globalStats-recoveredNumber\">\r\n          (<CountUp\r\n            end={props.globalData.recoveredPercent}\r\n            separator=\",\"\r\n            suffix=\"%\"\r\n            delay={0.3}\r\n            decimals={2}\r\n            duration={3.2} />)\r\n          </span>\r\n        }\r\n      </div>\r\n        { !props.hideDeaths &&\r\n          <div className=\"globalStats-deaths\">\r\n            <strong>Deaths: </strong>\r\n            <span>{props.globalData.deaths.toFixed().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</span>\r\n          </div>\r\n        }\r\n      <div className=\"globalStats-updated\">\r\n        <strong>Updated: </strong>\r\n        { props.globalData ? \r\n          <span>{props.globalData.updated}</span> :\r\n          <Loading />\r\n        }\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default GlobalStats\r\n","import React from 'react'\r\n\r\nconst StatsSummary = props => (\r\n    <div className=\"statsSummary componentSpacing\">\r\n      <div className=\"statsSummary-title\">\r\n        Summary\r\n      </div>\r\n      <ul className=\"statsSummary-list\">\r\n        <li className=\"statsSummary-item\">\r\n          <strong className=\"country\">\r\n            {props.globalData.mostRecovered[0].country}\r\n          </strong>\r\n            has the highest amount of recovered patients <span className=\"highlighted\">({props.globalData.mostRecovered[0].recoveredPercent.toFixed()}%)</span>\r\n          , followed by\r\n          <strong>\r\n            {props.globalData.mostRecovered[1].country}\r\n          </strong>\r\n          <span className=\"highlighted\">\r\n            ({props.globalData.mostRecovered[1].recoveredPercent.toFixed()}%)\r\n          </span>\r\n            and\r\n          <strong>\r\n            {props.globalData.mostRecovered[2].country}\r\n          </strong>\r\n          <span className=\"highlighted\">\r\n            ({props.globalData.mostRecovered[2].recoveredPercent.toFixed()}%)\r\n          </span>\r\n        </li>\r\n          { props.globalData.noDeaths &&\r\n            <li className=\"statsSummary-item\">\r\n              {props.globalData.noDeaths.map((item, index) => <span className=\"highlighted\" key={index}>{item.country}{index === 0 && props.globalData.noDeaths.length === 2 && \" and \"}{index === 0 && props.globalData.noDeaths.length > 2 && \", \"} {index === 1 && props.globalData.noDeaths.length > 2 && \" and \"}</span>).slice(0, 3)}\r\n              {props.globalData.noDeaths.length > 3 && \"are some of the countries that\"} have had <strong>multiple days</strong> without any reported deaths.\r\n          </li>\r\n          }\r\n        <li className=\"statsSummary-item\">\r\n          In <span className=\"highlighted\">\r\n            {props.globalData.criticalLessThanFive.toFixed()}%\r\n          </span>\r\n            of the countries with active cases, <span className=\"highlighted\">less than 5% of them are critical.</span>*\r\n        </li>\r\n        { props.globalData.recoveredMostDifference.country &&\r\n          <li className=\"statsSummary-item\">\r\n            <strong className=\"country\">\r\n              {props.globalData.recoveredMostDifference.country}\r\n            </strong>\r\n            has the highest increase in recoveries from the past day with <span className=\"highlighted\">+{props.globalData.recoveredMostDifference.recoveredDifference.toFixed()}%</span>*\r\n          </li>\r\n        }\r\n      </ul>\r\n      <div className=\"listNotice\">\r\n        *Based on countries with at least 1000 reported cases\r\n      </div>\r\n    </div>\r\n  )\r\n\r\nexport default StatsSummary\r\n","import React from 'react'\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer componentSpacing\">\r\n    Created by <a href=\"https://www.petterastedt.com/\" target=\"_blank\" alt=\"Link to portifolio website\" rel=\"noopener noreferrer\">Petter Åstedt</a>.\r\n    See the code on <a href=\"https://github.com/petterastedt/\" target=\"_blank\" alt=\"Link to Github\" rel=\"noopener noreferrer\">Github</a>.\r\n  </div>\r\n)\r\n\r\nexport default Footer\r\n","import React, { useState, useEffect } from 'react'\nimport covid from 'novelcovid'\nimport Header from './components/Header/Header'\nimport Filter from './components/Filter/Filter'\nimport ListItem from './components/ListItem/ListItem'\nimport GlobalStats from './components/GlobalStats/GlobalStats'\nimport StatsSummary from './components/StatsSummary/StatsSummary'\nimport Footer from './components/Footer/Footer'\n\nconst App = () => {\n  const [globalData, setGlobalData] = useState(null)\n  const [countriesData, setCountriesData] = useState([])\n  const [hideDeaths, setHideDeaths] = useState(true)\n  const [activeFilter, setActiveFilter] = useState({ first: true })\n\n  const historyEndpoint = 'https://corona.lmao.ninja/v2/historical/'\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let countries = await covid.getCountry({ sort: 'cases' })\n      let countriesCalculted = getCountriesCalculations(countries)\n\n      let arrOfCountries = await getHistoricalValuesForCountries(countriesCalculted)\n      let historicalDataFiltered = filterLast7Days(arrOfCountries)\n      let mergedData = mergeData(countriesCalculted, historicalDataFiltered, arrOfCountries)\n\n      setCountriesData(mergedData.slice().sort((a, b) => (a.recoveredPercent < b.recoveredPercent) ? 1 : -1))\n\n      let all = await covid.getAll()\n      let allCalculted = getAllCalculations(all, mergedData)\n\n      setGlobalData(allCalculted)\n    }\n    fetchData()\n  }, [])\n\n  const sortCountriesData = sorted => setCountriesData(sorted)\n  const hide = value => setHideDeaths(value)\n  const setFilter = filter => setActiveFilter(filter)\n\n  const getHistoricalValuesForCountries = async (countries) => {\n    const promises = []\n    countries.map(country => promises.push(fetch(`${historyEndpoint}${country.country}`).then(r => r.json())))\n    return await Promise.all(promises)\n  }\n\n  const filterLast7Days = countries => {\n    const arrOfCountries = []\n    countries.forEach(country => {\n      const arr = []\n      for (let key in country.timeline.deaths) {\n        if (country.timeline.deaths.hasOwnProperty(key)) {\n          arr.push(country.timeline.deaths[key])\n        }\n      }\n      arrOfCountries.push(arr.slice(arr.length - 7))\n    })\n    return arrOfCountries\n  }\n\n  const mergeData = (countryData, historicalData, historicalAll) => {\n    let arr = []\n\n    countryData.forEach((country, i) => {\n      let daysWithoutDeaths = 0\n      let recoveredYesterday\n      let recoveredDifference\n      historicalData[i].reverse().forEach((item, index) => {\n        if (item === historicalData[i][0] && index !== 0 && item !== historicalData[i][index+1]) {\n          daysWithoutDeaths = index+1\n        }\n      })\n\n      historicalAll.forEach(c => {\n        if (country.country.toUpperCase() === c.country.toUpperCase()) {\n          let deaths = Object.values(c.timeline.deaths)[Object.values(c.timeline.deaths).length-1]\n          let cases = Object.values(c.timeline.cases)[Object.values(c.timeline.cases).length-1]\n          let recovered = Object.values(c.timeline.recovered)[Object.values(c.timeline.recovered).length-1]\n\n          recoveredYesterday = recovered / (cases - deaths) * 100\n          recoveredDifference = Math.abs(country.recoveredPercent - recoveredYesterday)\n        }\n      })\n\n      let updatedItem = { ...country, historicalData: historicalData[i], daysWithoutDeaths, recoveredYesterday, recoveredDifference }\n      arr.push(updatedItem)\n    })\n    return arr\n  }\n\n  const getAllCalculations = (data, countriesData) => {\n    let updated = new Date(data.updated).toLocaleString('sv-SE')\n    let recoveredPercent = data.recovered / (data.cases - data.deaths) * 100\n    let mostRecovered = countriesData.sort((a,b) => b.recoveredPercent - a.recoveredPercent).slice(0, 3)\n    let noDeaths = countriesData.filter(item => item.daysWithoutDeaths > 0 && item.todayDeaths === 0)\n    let criticalLessThanFive = countriesData.filter(item => item.nonCriticalPercent > 95).length / countriesData.length * 100\n    let recoveredMostDifference = countriesData.filter(item => item.recoveredYesterday > 0 && item.recoveredYesterday !== item.recoveredPercent).sort((a,b) => b.recoveredDifference - a.recoveredDifference)[0]\n\n\n    let calculated = { ...data, recoveredPercent, updated, mostRecovered, noDeaths, criticalLessThanFive, recoveredMostDifference }\n    return calculated\n  }\n\n  const getCountriesCalculations = data => {\n    let updated = []\n\n    data.forEach(item => {\n      const threshold = 999 // Only show countries with more than X cases\n      if (item.cases > threshold) {\n        let recoveredPercent = item.recovered / (item.cases - item.deaths) * 100\n        let criticalPercent = item.critical / (item.cases - item.deaths) * 100\n        let nonCriticalPercent = 100 - criticalPercent\n        let activePercent = item.active / (item.cases - item.deaths) * 100\n\n        let result = { ...item, recoveredPercent, criticalPercent, nonCriticalPercent, activePercent }\n        updated.push(result)\n      }\n    })\n    return updated\n  }\n\n  return (\n    <div className=\"container\">\n      <Header />\n\n      <GlobalStats\n        countriesData={countriesData}\n        hideDeaths={hideDeaths}\n        globalData={globalData} />\n\n      {globalData &&\n        <StatsSummary\n          globalData={globalData} />\n      }\n\n      {countriesData &&\n        <Filter\n          countriesState={countriesData}\n          hide={hide}\n          hideDeaths={hideDeaths}\n          setFilter={setFilter}\n          sortCountriesData={sortCountriesData} \n          activeFilter={activeFilter}/>\n      }\n\n      {countriesData &&\n        <ul className=\"list resetList componentSpacing\"> {\n          countriesData.map((item, i) => <ListItem itemData={item} activeFilter={activeFilter} hideDeaths={hideDeaths} key={i} />)\n        } </ul>\n      }\n\n      <div className=\"listNotice\">\n        <a href=\"https://github.com/NovelCOVID/API\" target=\"_blank\" alt=\"Link to Github\" rel=\"noopener noreferrer\">Data sources</a>\n      </div>\n\n       <Footer />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}